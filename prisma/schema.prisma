// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserFollow {
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now()) @db.Timestamptz

  follower  User @relation("UserFollower", fields: [follower_id], references: [user_id])
  following User @relation("UserFollowing", fields: [following_id], references: [user_id])

  @@id([follower_id, following_id])
  @@map("user_follow")
}

model User {
  user_id       Int      @id @default(autoincrement())
  username      String   @unique @db.VarChar(30)
  name          String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  password      String   @db.VarChar(255)
  points        Int?
  pages         Int?
  is_author     Boolean  @default(false)
  profile_image Bytes?
  created_at    DateTime @default(now()) @db.Timestamptz
  biography     String?  @db.VarChar(250)

  posts       Post[]
  following   UserFollow[]         @relation("UserFollower")
  followers   UserFollow[]         @relation("UserFollowing")
  challenges  ChallengeUser[]
  genres      UserGenre[]
  liked_posts PostLike[]
  rated_books RateBook[]
  bookshelve  UserBookshelfState[]

  @@map("user")
}

model Book {
  book_id          Int      @id
  isbn             BigInt?
  title            String?  @db.VarChar(255)
  genre            String?  @db.VarChar(255)
  cover            String?  @db.VarChar(1000)
  synopsis         String?  @db.VarChar(1000)
  year             Int?
  pages            Int?
  authors          String?  @db.VarChar(255)
  google_image_url String?  @db.VarChar(1000)
  created_at       DateTime @default(now()) @db.Timestamptz

  in_user_bookshelf UserBookshelfState[]
  posts             Post[]
  ratings           RateBook[]

  @@map("book")
}

model Post {
  post_id    Int      @id @default(autoincrement())
  book_id    Int
  user_id    Int
  is_spoiler Boolean  @default(false)
  title      String?  @db.VarChar(255)
  text       String   @db.VarChar(1000)
  is_review  Boolean  @default(false)
  parent_id  Int?
  created_at DateTime @default(now()) @db.Timestamptz

  user  User @relation(fields: [user_id], references: [user_id])
  livro Book @relation(fields: [book_id], references: [book_id])

  parent   Post?      @relation("PostToComments", fields: [parent_id], references: [post_id])
  comments Post[]     @relation("PostToComments")
  liked_by PostLike[]

  @@map("post")
}

model Challenge {
  challenge_id Int      @id @default(autoincrement())
  points       Int
  question     String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamptz

  users        ChallengeUser[]
  alternatives Alternative[]

  @@map("challenge")
}

model ChallengeUser {
  user_id      Int
  challenge_id Int
  created_at   DateTime @default(now()) @db.Timestamptz

  user      User      @relation(fields: [user_id], references: [user_id])
  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id])

  @@id([user_id, challenge_id])
  @@map("challenge_user")
}

model Alternative {
  alternative_id Int      @id @default(autoincrement())
  is_correct     Boolean  @default(false)
  question       String   @db.VarChar(255)
  challenge_id   Int
  created_at     DateTime @default(now()) @db.Timestamptz

  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id])

  @@map("alternative")
}

model Genre {
  genre_id   Int    @id @default(autoincrement())
  genre_name String @db.VarChar(255) @unique

  users UserGenre[]

  @@map("genre")
}

model UserGenre {
  user_id    Int
  genre_id   Int
  created_at DateTime @default(now()) @db.Timestamptz

  user  User  @relation(fields: [user_id], references: [user_id])
  genre Genre @relation(fields: [genre_id], references: [genre_id])

  @@id([user_id, genre_id])
  @@map("user_genre")
}

model PostLike {
  user_id    Int
  post_id    Int
  created_at DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [user_id], references: [user_id])
  post Post @relation(fields: [post_id], references: [post_id])

  @@id([user_id, post_id])
  @@map("post_like")
}

model RateBook {
  user_id    Int
  book_id    Int
  rating     Int      @db.SmallInt
  created_at DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [user_id], references: [user_id])
  book Book @relation(fields: [book_id], references: [book_id])

  @@id([user_id, book_id])
  @@map("rate_book")
}

enum BookshelfState {
  TO_BE_READ
  READING
  READ
}

model UserBookshelfState {
  user_id    Int
  book_id    Int
  state      BookshelfState @default(TO_BE_READ)
  created_at DateTime       @default(now()) @db.Timestamptz

  user User @relation(fields: [user_id], references: [user_id])
  book Book @relation(fields: [book_id], references: [book_id])

  @@id([user_id, book_id])
  @@map("user_bookshelf_state")
}
